#!/usr/bin/env ruby

require 'fileutils'

raise "Not the right place #{Dir.pwd}" unless File.directory?('lib')

#scripts = (Dir['lib/*.rb'] + Dir['lib/**/*']).uniq
#scripts = scripts.reject{ |f| File.directory?(f) }
# We don't want the rake helper.
#scripts = scripts - ["lib/setup/rake.rb"]
#scripts = scripts + ["bin/setup.rb"]

scripts = %w{
  lib/setup.rb
  lib/setup/core_ext.rb
  lib/setup/constants.rb
  lib/setup/project.rb
  lib/setup/session.rb
  lib/setup/base.rb
  lib/setup/compiler.rb
  lib/setup/configuration.rb
  lib/setup/installer.rb
  lib/setup/tester.rb
  lib/setup/uninstaller.rb
  lib/setup/command.rb
}

version = YAML.load_file('.ruby')['version']

comment = <<-HERE
# Setup.rb v#{version}
#
# This is a stand-alone bundle of the setup.rb application.
# You can place it in your projects script/ directory, or
# call it 'setup.rb' and place it in your project's
# root directory (just like old times).
#
# NOTE: As of version 5.1.0 this bundled rendition is also
# being used for the bin/setup.rb exe. Rather than the previous:
#
#   require 'setup/command'
#   Setup::Command.run
#
# By doing so, +rvm+ should be able to use it across all rubies
# without issue and without needing to install it for each.
HERE

#
bundle = ""

# insert scripts
scripts.each do |script|
  bundle << "\n\n# %-16s #{"#" * 60}\n\n" % File.basename(script)
  bundle << File.read(script)
end
bundle << "\nSetup::Command.run"

# remove setup requires
bundle.gsub!(/require\s+["']setup\/(.*?)["']\s*$/, '')

# remove blank lines
bundle.gsub!(/^\s*\n/, '')

# remove comments
bundle.gsub!(/^\s*\#.*?\n/, '')

# save
File.open('script/setup', 'w') do |f|
  f << "#!/usr/bin/env ruby\n"
  f << comment
  f << bundle
end
FileUtils.chmod(0744, 'script/setup')

File.open('bin/setup.rb', 'w') do |f|
  f << "#!/usr/bin/env ruby\n"
  f << comment
  f << bundle
end
FileUtils.chmod(0744, 'bin/setup.rb')

